name: Deploy to EC2

on:
  push:
    branches:
      - master

env:
  EC2_USER: ubuntu
  EC2_HOST: ${{ secrets.EC2_HOST }}
  REMOTE_DIR: /home/ubuntu/psa-web-krawler
  SERVICE_NAME: my-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Build with Maven
        run: mvn -B package --file backend/pom.xml

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.key
          chmod 600 ~/.ssh/ec2.key
          echo -e "Host ec2\n\tHostName ${{ env.EC2_HOST }}\n\tUser ${{ env.EC2_USER }}\n\tIdentityFile ~/.ssh/ec2.key\n\tStrictHostKeyChecking no" > ~/.ssh/config

      - name: Upload JAR to EC2
        run: |
          scp backend/target/webcrawler-0.0.1-SNAPSHOT.jar ec2:${{ env.REMOTE_DIR }}/app.jar

      - name: Configure and Start Service
        run: |
          ssh ec2 '
            # Ensure Java is installed
            if ! command -v java &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y openjdk-17-jdk
            fi
            
            # Create directory if needed
            mkdir -p ${{ env.REMOTE_DIR }}
            
            # Create systemd service file
            sudo tee /etc/systemd/system/${{ env.SERVICE_NAME }}.service << EOL
          [Unit]
          Description=Spring Boot Application
          After=network.target

          [Service]
          Type=simple
          User=${{ env.EC2_USER }}
          WorkingDirectory=${{ env.REMOTE_DIR }}
          ExecStart=/usr/bin/java -jar ${{ env.REMOTE_DIR }}/app.jar
          SuccessExitStatus=143
          TimeoutStopSec=10
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
          EOL
            
            # Reload and restart service
            sudo systemctl daemon-reload
            sudo systemctl enable ${{ env.SERVICE_NAME }}
            sudo systemctl restart ${{ env.SERVICE_NAME }}
            
            # Check service status
            sleep 5
            if sudo systemctl is-active --quiet ${{ env.SERVICE_NAME }}; then
              echo "Service started successfully!"
              sudo systemctl status ${{ env.SERVICE_NAME }}
            else
              echo "Service failed to start. Checking logs..."
              sudo journalctl -u ${{ env.SERVICE_NAME }} -n 50 --no-pager
              exit 1
            fi
          '
